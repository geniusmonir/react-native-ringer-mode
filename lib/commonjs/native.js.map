{"version":3,"sources":["native.ts"],"names":["LINKING_ERROR","Platform","select","ios","default","RingerMode","NativeModules","Proxy","get","Error","isAndroid","OS","RINGER_MODE","silent","vibrate","normal","getRingerMode","setRingerMode","mode","checkDndAccess","requestDndAccess","sendHighPriorityNotification","config"],"mappings":";;;;;;;;;;;;AAAA;;AAEA,MAAMA,aAAa,GAChB,mFAAD,GACAC,sBAASC,MAAT,CAAgB;AAAEC,EAAAA,GAAG,EAAE,gCAAP;AAAyCC,EAAAA,OAAO,EAAE;AAAlD,CAAhB,CADA,GAEA,sDAFA,GAGA,6CAJF;AAMA,MAAMC,UAAU,GAAGC,2BAAcD,UAAd,GACfC,2BAAcD,UADC,GAEf,IAAIE,KAAJ,CACE,EADF,EAEE;AACEC,EAAAA,GAAG,GAAG;AACJ,UAAM,IAAIC,KAAJ,CAAUT,aAAV,CAAN;AACD;;AAHH,CAFF,CAFJ;AAWA,MAAMU,SAAS,GAAGT,sBAASU,EAAT,KAAgB,SAAlC,C,CAEA;;AACO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,CADiB;AAEzBC,EAAAA,OAAO,EAAE,CAFgB;AAGzBC,EAAAA,MAAM,EAAE;AAHiB,CAApB,C,CAMP;;;;AAmBO,eAAeC,aAAf,GAAoE;AACzE,MAAI,CAACN,SAAL,EAAgB;AACd;AACD;;AAED,SAAOL,UAAU,CAACW,aAAX,EAAP;AACD;;AAEM,eAAeC,aAAf,CACLC,IADK,EAEgC;AACrC,MAAI,CAACR,SAAL,EAAgB;AACd;AACD;;AAED,SAAOL,UAAU,CAACY,aAAX,CAAyBC,IAAzB,CAAP;AACD;;AAEM,eAAeC,cAAf,GAA8D;AACnE,MAAI,CAACT,SAAL,EAAgB;AACd;AACD;;AAED,SAAOL,UAAU,CAACc,cAAX,EAAP;AACD;;AAEM,eAAeC,gBAAf,GAAgE;AACrE,MAAI,CAACV,SAAL,EAAgB;AACd;AACD;;AAED,SAAOL,UAAU,CAACe,gBAAX,EAAP;AACD;;AAEM,eAAeC,4BAAf,CACLC,MADK,EAEU;AACf,MAAI,CAACZ,SAAL,EAAgB;AAChB,SAAOL,UAAU,CAACgB,4BAAX,CAAwCC,MAAxC,CAAP;AACD","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'react-native-ringer-mode' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst RingerMode = NativeModules.RingerMode\n  ? NativeModules.RingerMode\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nconst isAndroid = Platform.OS === 'android';\n\n// Accepted Ringer Mode values\nexport const RINGER_MODE = {\n  silent: 0,\n  vibrate: 1,\n  normal: 2,\n} as const;\n\n// Ringer Mode type definition\ntype ValueOf<T> = T[keyof T];\nexport type RingerModeType = ValueOf<typeof RINGER_MODE>;\n\nexport interface HighPriorityNotificationConfig {\n  title: string; // notification title default: High Priority Notification\n  message: string; // notification body text default: This is a high priority Notification\n  notificationIcon: string; // drawable name like \"notification_icon\"\n  playSound?: boolean; // play default sound\n  playVibration?: boolean; // play default vibration\n  vibrationPattern?: number[]; // custom vibration pattern [wait, vibrate, pause, vibrate...]\n  bypassDnd?: boolean; // allow bypass of DND if granted default: false if not given\n  autoCancel?: boolean; // remove on tap default: false if not given\n  channelId?: string; // default: \"priotiry_channel_id\"\n  channelName?: string; // default: \"Priority Notification Channel\"\n  groupId?: string; // optional group\n  category?: 'alarm' | 'call' | 'message' | 'event' | 'reminder' | 'service'; // default \"alarm\"\n}\n\nexport async function getRingerMode(): Promise<RingerModeType | undefined> {\n  if (!isAndroid) {\n    return;\n  }\n\n  return RingerMode.getRingerMode();\n}\n\nexport async function setRingerMode(\n  mode: RingerModeType\n): Promise<RingerModeType | undefined> {\n  if (!isAndroid) {\n    return;\n  }\n\n  return RingerMode.setRingerMode(mode);\n}\n\nexport async function checkDndAccess(): Promise<boolean | undefined> {\n  if (!isAndroid) {\n    return;\n  }\n\n  return RingerMode.checkDndAccess();\n}\n\nexport async function requestDndAccess(): Promise<boolean | undefined> {\n  if (!isAndroid) {\n    return;\n  }\n\n  return RingerMode.requestDndAccess();\n}\n\nexport async function sendHighPriorityNotification(\n  config: HighPriorityNotificationConfig\n): Promise<void> {\n  if (!isAndroid) return;\n  return RingerMode.sendHighPriorityNotification(config);\n}\n"]}